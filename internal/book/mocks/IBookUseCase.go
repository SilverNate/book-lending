// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	dto "book-lending-api/internal/book/dto"
	entity "book-lending-api/internal/book/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IBookUseCase is an autogenerated mock type for the IBookUseCase type
type IBookUseCase struct {
	mock.Mock
}

type IBookUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *IBookUseCase) EXPECT() *IBookUseCase_Expecter {
	return &IBookUseCase_Expecter{mock: &_m.Mock}
}

// AddBook provides a mock function with given fields: ctx, input
func (_m *IBookUseCase) AddBook(ctx context.Context, input dto.CreateBookRequest) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for AddBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateBookRequest) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBookUseCase_AddBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBook'
type IBookUseCase_AddBook_Call struct {
	*mock.Call
}

// AddBook is a helper method to define mock.On call
//   - ctx context.Context
//   - input dto.CreateBookRequest
func (_e *IBookUseCase_Expecter) AddBook(ctx interface{}, input interface{}) *IBookUseCase_AddBook_Call {
	return &IBookUseCase_AddBook_Call{Call: _e.mock.On("AddBook", ctx, input)}
}

func (_c *IBookUseCase_AddBook_Call) Run(run func(ctx context.Context, input dto.CreateBookRequest)) *IBookUseCase_AddBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateBookRequest))
	})
	return _c
}

func (_c *IBookUseCase_AddBook_Call) Return(_a0 error) *IBookUseCase_AddBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBookUseCase_AddBook_Call) RunAndReturn(run func(context.Context, dto.CreateBookRequest) error) *IBookUseCase_AddBook_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBook provides a mock function with given fields: ctx, id
func (_m *IBookUseCase) DeleteBook(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBookUseCase_DeleteBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBook'
type IBookUseCase_DeleteBook_Call struct {
	*mock.Call
}

// DeleteBook is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *IBookUseCase_Expecter) DeleteBook(ctx interface{}, id interface{}) *IBookUseCase_DeleteBook_Call {
	return &IBookUseCase_DeleteBook_Call{Call: _e.mock.On("DeleteBook", ctx, id)}
}

func (_c *IBookUseCase_DeleteBook_Call) Run(run func(ctx context.Context, id int64)) *IBookUseCase_DeleteBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IBookUseCase_DeleteBook_Call) Return(_a0 error) *IBookUseCase_DeleteBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBookUseCase_DeleteBook_Call) RunAndReturn(run func(context.Context, int64) error) *IBookUseCase_DeleteBook_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllBooks provides a mock function with given fields: ctx, offset, limit
func (_m *IBookUseCase) GetAllBooks(ctx context.Context, offset int, limit int) ([]entity.Book, error) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBooks")
	}

	var r0 []entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]entity.Book, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []entity.Book); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBookUseCase_GetAllBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllBooks'
type IBookUseCase_GetAllBooks_Call struct {
	*mock.Call
}

// GetAllBooks is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int
//   - limit int
func (_e *IBookUseCase_Expecter) GetAllBooks(ctx interface{}, offset interface{}, limit interface{}) *IBookUseCase_GetAllBooks_Call {
	return &IBookUseCase_GetAllBooks_Call{Call: _e.mock.On("GetAllBooks", ctx, offset, limit)}
}

func (_c *IBookUseCase_GetAllBooks_Call) Run(run func(ctx context.Context, offset int, limit int)) *IBookUseCase_GetAllBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *IBookUseCase_GetAllBooks_Call) Return(_a0 []entity.Book, _a1 error) *IBookUseCase_GetAllBooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBookUseCase_GetAllBooks_Call) RunAndReturn(run func(context.Context, int, int) ([]entity.Book, error)) *IBookUseCase_GetAllBooks_Call {
	_c.Call.Return(run)
	return _c
}

// GetBookByID provides a mock function with given fields: ctx, id
func (_m *IBookUseCase) GetBookByID(ctx context.Context, id int64) (*entity.Book, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBookByID")
	}

	var r0 *entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.Book, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Book); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBookUseCase_GetBookByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookByID'
type IBookUseCase_GetBookByID_Call struct {
	*mock.Call
}

// GetBookByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *IBookUseCase_Expecter) GetBookByID(ctx interface{}, id interface{}) *IBookUseCase_GetBookByID_Call {
	return &IBookUseCase_GetBookByID_Call{Call: _e.mock.On("GetBookByID", ctx, id)}
}

func (_c *IBookUseCase_GetBookByID_Call) Run(run func(ctx context.Context, id int64)) *IBookUseCase_GetBookByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IBookUseCase_GetBookByID_Call) Return(_a0 *entity.Book, _a1 error) *IBookUseCase_GetBookByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBookUseCase_GetBookByID_Call) RunAndReturn(run func(context.Context, int64) (*entity.Book, error)) *IBookUseCase_GetBookByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBook provides a mock function with given fields: ctx, id, input
func (_m *IBookUseCase) UpdateBook(ctx context.Context, id int64, input dto.UpdateBookRequest) error {
	ret := _m.Called(ctx, id, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.UpdateBookRequest) error); ok {
		r0 = rf(ctx, id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBookUseCase_UpdateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBook'
type IBookUseCase_UpdateBook_Call struct {
	*mock.Call
}

// UpdateBook is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - input dto.UpdateBookRequest
func (_e *IBookUseCase_Expecter) UpdateBook(ctx interface{}, id interface{}, input interface{}) *IBookUseCase_UpdateBook_Call {
	return &IBookUseCase_UpdateBook_Call{Call: _e.mock.On("UpdateBook", ctx, id, input)}
}

func (_c *IBookUseCase_UpdateBook_Call) Run(run func(ctx context.Context, id int64, input dto.UpdateBookRequest)) *IBookUseCase_UpdateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(dto.UpdateBookRequest))
	})
	return _c
}

func (_c *IBookUseCase_UpdateBook_Call) Return(_a0 error) *IBookUseCase_UpdateBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBookUseCase_UpdateBook_Call) RunAndReturn(run func(context.Context, int64, dto.UpdateBookRequest) error) *IBookUseCase_UpdateBook_Call {
	_c.Call.Return(run)
	return _c
}

// NewIBookUseCase creates a new instance of IBookUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBookUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBookUseCase {
	mock := &IBookUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
