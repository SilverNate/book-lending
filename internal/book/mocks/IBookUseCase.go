// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	dto "book-lending-api/internal/book/dto"
	entity "book-lending-api/internal/book/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IBookUseCase is an autogenerated mock type for the IBookUseCase type
type IBookUseCase struct {
	mock.Mock
}

type IBookUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *IBookUseCase) EXPECT() *IBookUseCase_Expecter {
	return &IBookUseCase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, input
func (_m *IBookUseCase) Create(ctx context.Context, input dto.CreateBookRequest) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateBookRequest) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBookUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IBookUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input dto.CreateBookRequest
func (_e *IBookUseCase_Expecter) Create(ctx interface{}, input interface{}) *IBookUseCase_Create_Call {
	return &IBookUseCase_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *IBookUseCase_Create_Call) Run(run func(ctx context.Context, input dto.CreateBookRequest)) *IBookUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateBookRequest))
	})
	return _c
}

func (_c *IBookUseCase_Create_Call) Return(_a0 error) *IBookUseCase_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBookUseCase_Create_Call) RunAndReturn(run func(context.Context, dto.CreateBookRequest) error) *IBookUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *IBookUseCase) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBookUseCase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IBookUseCase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *IBookUseCase_Expecter) Delete(ctx interface{}, id interface{}) *IBookUseCase_Delete_Call {
	return &IBookUseCase_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *IBookUseCase_Delete_Call) Run(run func(ctx context.Context, id int64)) *IBookUseCase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IBookUseCase_Delete_Call) Return(_a0 error) *IBookUseCase_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBookUseCase_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *IBookUseCase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, offset, limit
func (_m *IBookUseCase) GetAll(ctx context.Context, offset int, limit int) ([]entity.Book, error) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]entity.Book, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []entity.Book); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBookUseCase_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type IBookUseCase_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int
//   - limit int
func (_e *IBookUseCase_Expecter) GetAll(ctx interface{}, offset interface{}, limit interface{}) *IBookUseCase_GetAll_Call {
	return &IBookUseCase_GetAll_Call{Call: _e.mock.On("GetAll", ctx, offset, limit)}
}

func (_c *IBookUseCase_GetAll_Call) Run(run func(ctx context.Context, offset int, limit int)) *IBookUseCase_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *IBookUseCase_GetAll_Call) Return(_a0 []entity.Book, _a1 error) *IBookUseCase_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBookUseCase_GetAll_Call) RunAndReturn(run func(context.Context, int, int) ([]entity.Book, error)) *IBookUseCase_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IBookUseCase) GetByID(ctx context.Context, id int64) (*entity.Book, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.Book, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Book); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBookUseCase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type IBookUseCase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *IBookUseCase_Expecter) GetByID(ctx interface{}, id interface{}) *IBookUseCase_GetByID_Call {
	return &IBookUseCase_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *IBookUseCase_GetByID_Call) Run(run func(ctx context.Context, id int64)) *IBookUseCase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IBookUseCase_GetByID_Call) Return(_a0 *entity.Book, _a1 error) *IBookUseCase_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBookUseCase_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*entity.Book, error)) *IBookUseCase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, input
func (_m *IBookUseCase) Update(ctx context.Context, id int64, input dto.UpdateBookRequest) error {
	ret := _m.Called(ctx, id, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.UpdateBookRequest) error); ok {
		r0 = rf(ctx, id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBookUseCase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type IBookUseCase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - input dto.UpdateBookRequest
func (_e *IBookUseCase_Expecter) Update(ctx interface{}, id interface{}, input interface{}) *IBookUseCase_Update_Call {
	return &IBookUseCase_Update_Call{Call: _e.mock.On("Update", ctx, id, input)}
}

func (_c *IBookUseCase_Update_Call) Run(run func(ctx context.Context, id int64, input dto.UpdateBookRequest)) *IBookUseCase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(dto.UpdateBookRequest))
	})
	return _c
}

func (_c *IBookUseCase_Update_Call) Return(_a0 error) *IBookUseCase_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBookUseCase_Update_Call) RunAndReturn(run func(context.Context, int64, dto.UpdateBookRequest) error) *IBookUseCase_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewIBookUseCase creates a new instance of IBookUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBookUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBookUseCase {
	mock := &IBookUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
