// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "book-lending-api/internal/book/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IBookRepository is an autogenerated mock type for the IBookRepository type
type IBookRepository struct {
	mock.Mock
}

type IBookRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IBookRepository) EXPECT() *IBookRepository_Expecter {
	return &IBookRepository_Expecter{mock: &_m.Mock}
}

// CreateBook provides a mock function with given fields: ctx, book
func (_m *IBookRepository) CreateBook(ctx context.Context, book *entity.Book) error {
	ret := _m.Called(ctx, book)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Book) error); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBookRepository_CreateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBook'
type IBookRepository_CreateBook_Call struct {
	*mock.Call
}

// CreateBook is a helper method to define mock.On call
//   - ctx context.Context
//   - book *entity.Book
func (_e *IBookRepository_Expecter) CreateBook(ctx interface{}, book interface{}) *IBookRepository_CreateBook_Call {
	return &IBookRepository_CreateBook_Call{Call: _e.mock.On("CreateBook", ctx, book)}
}

func (_c *IBookRepository_CreateBook_Call) Run(run func(ctx context.Context, book *entity.Book)) *IBookRepository_CreateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Book))
	})
	return _c
}

func (_c *IBookRepository_CreateBook_Call) Return(_a0 error) *IBookRepository_CreateBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBookRepository_CreateBook_Call) RunAndReturn(run func(context.Context, *entity.Book) error) *IBookRepository_CreateBook_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBook provides a mock function with given fields: ctx, id
func (_m *IBookRepository) DeleteBook(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBookRepository_DeleteBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBook'
type IBookRepository_DeleteBook_Call struct {
	*mock.Call
}

// DeleteBook is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *IBookRepository_Expecter) DeleteBook(ctx interface{}, id interface{}) *IBookRepository_DeleteBook_Call {
	return &IBookRepository_DeleteBook_Call{Call: _e.mock.On("DeleteBook", ctx, id)}
}

func (_c *IBookRepository_DeleteBook_Call) Run(run func(ctx context.Context, id int64)) *IBookRepository_DeleteBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IBookRepository_DeleteBook_Call) Return(_a0 error) *IBookRepository_DeleteBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBookRepository_DeleteBook_Call) RunAndReturn(run func(context.Context, int64) error) *IBookRepository_DeleteBook_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllBook provides a mock function with given fields: ctx, offset, limit
func (_m *IBookRepository) GetAllBook(ctx context.Context, offset int, limit int) ([]entity.Book, error) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBook")
	}

	var r0 []entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]entity.Book, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []entity.Book); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBookRepository_GetAllBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllBook'
type IBookRepository_GetAllBook_Call struct {
	*mock.Call
}

// GetAllBook is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int
//   - limit int
func (_e *IBookRepository_Expecter) GetAllBook(ctx interface{}, offset interface{}, limit interface{}) *IBookRepository_GetAllBook_Call {
	return &IBookRepository_GetAllBook_Call{Call: _e.mock.On("GetAllBook", ctx, offset, limit)}
}

func (_c *IBookRepository_GetAllBook_Call) Run(run func(ctx context.Context, offset int, limit int)) *IBookRepository_GetAllBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *IBookRepository_GetAllBook_Call) Return(_a0 []entity.Book, _a1 error) *IBookRepository_GetAllBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBookRepository_GetAllBook_Call) RunAndReturn(run func(context.Context, int, int) ([]entity.Book, error)) *IBookRepository_GetAllBook_Call {
	_c.Call.Return(run)
	return _c
}

// GetBookByID provides a mock function with given fields: ctx, id
func (_m *IBookRepository) GetBookByID(ctx context.Context, id int64) (*entity.Book, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBookByID")
	}

	var r0 *entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.Book, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Book); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBookRepository_GetBookByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookByID'
type IBookRepository_GetBookByID_Call struct {
	*mock.Call
}

// GetBookByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *IBookRepository_Expecter) GetBookByID(ctx interface{}, id interface{}) *IBookRepository_GetBookByID_Call {
	return &IBookRepository_GetBookByID_Call{Call: _e.mock.On("GetBookByID", ctx, id)}
}

func (_c *IBookRepository_GetBookByID_Call) Run(run func(ctx context.Context, id int64)) *IBookRepository_GetBookByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IBookRepository_GetBookByID_Call) Return(_a0 *entity.Book, _a1 error) *IBookRepository_GetBookByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBookRepository_GetBookByID_Call) RunAndReturn(run func(context.Context, int64) (*entity.Book, error)) *IBookRepository_GetBookByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBookByTitleAndAuthor provides a mock function with given fields: ctx, title, author
func (_m *IBookRepository) GetBookByTitleAndAuthor(ctx context.Context, title string, author string) (*entity.Book, error) {
	ret := _m.Called(ctx, title, author)

	if len(ret) == 0 {
		panic("no return value specified for GetBookByTitleAndAuthor")
	}

	var r0 *entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.Book, error)); ok {
		return rf(ctx, title, author)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.Book); ok {
		r0 = rf(ctx, title, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, title, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBookRepository_GetBookByTitleAndAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookByTitleAndAuthor'
type IBookRepository_GetBookByTitleAndAuthor_Call struct {
	*mock.Call
}

// GetBookByTitleAndAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - title string
//   - author string
func (_e *IBookRepository_Expecter) GetBookByTitleAndAuthor(ctx interface{}, title interface{}, author interface{}) *IBookRepository_GetBookByTitleAndAuthor_Call {
	return &IBookRepository_GetBookByTitleAndAuthor_Call{Call: _e.mock.On("GetBookByTitleAndAuthor", ctx, title, author)}
}

func (_c *IBookRepository_GetBookByTitleAndAuthor_Call) Run(run func(ctx context.Context, title string, author string)) *IBookRepository_GetBookByTitleAndAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IBookRepository_GetBookByTitleAndAuthor_Call) Return(_a0 *entity.Book, _a1 error) *IBookRepository_GetBookByTitleAndAuthor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBookRepository_GetBookByTitleAndAuthor_Call) RunAndReturn(run func(context.Context, string, string) (*entity.Book, error)) *IBookRepository_GetBookByTitleAndAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBook provides a mock function with given fields: ctx, book
func (_m *IBookRepository) UpdateBook(ctx context.Context, book *entity.Book) error {
	ret := _m.Called(ctx, book)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Book) error); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBookRepository_UpdateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBook'
type IBookRepository_UpdateBook_Call struct {
	*mock.Call
}

// UpdateBook is a helper method to define mock.On call
//   - ctx context.Context
//   - book *entity.Book
func (_e *IBookRepository_Expecter) UpdateBook(ctx interface{}, book interface{}) *IBookRepository_UpdateBook_Call {
	return &IBookRepository_UpdateBook_Call{Call: _e.mock.On("UpdateBook", ctx, book)}
}

func (_c *IBookRepository_UpdateBook_Call) Run(run func(ctx context.Context, book *entity.Book)) *IBookRepository_UpdateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Book))
	})
	return _c
}

func (_c *IBookRepository_UpdateBook_Call) Return(_a0 error) *IBookRepository_UpdateBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBookRepository_UpdateBook_Call) RunAndReturn(run func(context.Context, *entity.Book) error) *IBookRepository_UpdateBook_Call {
	_c.Call.Return(run)
	return _c
}

// NewIBookRepository creates a new instance of IBookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBookRepository {
	mock := &IBookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
