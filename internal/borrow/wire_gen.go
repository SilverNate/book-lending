// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package borrow

import (
	"book-lending-api/config"
	repository2 "book-lending-api/internal/book/repository"
	"book-lending-api/internal/book/usecase"
	"book-lending-api/internal/borrow/delivery/http"
	"book-lending-api/internal/borrow/repository"
	usecase2 "book-lending-api/internal/borrow/usecase"
	"book-lending-api/pkg/db"
	"book-lending-api/pkg/infrastructure"
	"book-lending-api/pkg/logger"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitBorrowHandler() *http.BorrowHandler {
	envConfig := ProvideEnvConfig()
	db := ProvideDatabase(envConfig)
	logrusLogger := logger.NewLogger()
	borrowRepository := repository.NewBorrowRepository(db, logrusLogger)
	bookRepository := repository2.NewBookRepository(db, logrusLogger)
	bookUsecase := usecase.NewBookUseCase(bookRepository, logrusLogger)
	redisClient := ProvideRedis()
	borrowUsecase := usecase2.NewBorrowUsecase(borrowRepository, logrusLogger, bookUsecase, redisClient)
	borrowHandler := http.NewBorrowHandler(borrowUsecase, logrusLogger)
	return borrowHandler
}

// wire.go:

func ProvideEnvConfig() *config.EnvConfig {
	return config.LoadEnv()
}

func ProvideDatabase(cfg *config.EnvConfig) *gorm.DB {
	return db.InitializeMySQL(cfg)
}

func ProvideRedis() *infrastructure.RedisClient {
	return infrastructure.NewRedis()
}
