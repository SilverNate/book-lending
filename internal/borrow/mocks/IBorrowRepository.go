// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "book-lending-api/internal/borrow/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IBorrowRepository is an autogenerated mock type for the IBorrowRepository type
type IBorrowRepository struct {
	mock.Mock
}

type IBorrowRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IBorrowRepository) EXPECT() *IBorrowRepository_Expecter {
	return &IBorrowRepository_Expecter{mock: &_m.Mock}
}

// CountBorrowsInLast7Days provides a mock function with given fields: ctx, userID
func (_m *IBorrowRepository) CountBorrowsInLast7Days(ctx context.Context, userID int64) (int, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CountBorrowsInLast7Days")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBorrowRepository_CountBorrowsInLast7Days_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountBorrowsInLast7Days'
type IBorrowRepository_CountBorrowsInLast7Days_Call struct {
	*mock.Call
}

// CountBorrowsInLast7Days is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *IBorrowRepository_Expecter) CountBorrowsInLast7Days(ctx interface{}, userID interface{}) *IBorrowRepository_CountBorrowsInLast7Days_Call {
	return &IBorrowRepository_CountBorrowsInLast7Days_Call{Call: _e.mock.On("CountBorrowsInLast7Days", ctx, userID)}
}

func (_c *IBorrowRepository_CountBorrowsInLast7Days_Call) Run(run func(ctx context.Context, userID int64)) *IBorrowRepository_CountBorrowsInLast7Days_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IBorrowRepository_CountBorrowsInLast7Days_Call) Return(_a0 int, _a1 error) *IBorrowRepository_CountBorrowsInLast7Days_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBorrowRepository_CountBorrowsInLast7Days_Call) RunAndReturn(run func(context.Context, int64) (int, error)) *IBorrowRepository_CountBorrowsInLast7Days_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBorrowing provides a mock function with given fields: ctx, b
func (_m *IBorrowRepository) CreateBorrowing(ctx context.Context, b *entity.Borrowing) error {
	ret := _m.Called(ctx, b)

	if len(ret) == 0 {
		panic("no return value specified for CreateBorrowing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Borrowing) error); ok {
		r0 = rf(ctx, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBorrowRepository_CreateBorrowing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBorrowing'
type IBorrowRepository_CreateBorrowing_Call struct {
	*mock.Call
}

// CreateBorrowing is a helper method to define mock.On call
//   - ctx context.Context
//   - b *entity.Borrowing
func (_e *IBorrowRepository_Expecter) CreateBorrowing(ctx interface{}, b interface{}) *IBorrowRepository_CreateBorrowing_Call {
	return &IBorrowRepository_CreateBorrowing_Call{Call: _e.mock.On("CreateBorrowing", ctx, b)}
}

func (_c *IBorrowRepository_CreateBorrowing_Call) Run(run func(ctx context.Context, b *entity.Borrowing)) *IBorrowRepository_CreateBorrowing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Borrowing))
	})
	return _c
}

func (_c *IBorrowRepository_CreateBorrowing_Call) Return(_a0 error) *IBorrowRepository_CreateBorrowing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBorrowRepository_CreateBorrowing_Call) RunAndReturn(run func(context.Context, *entity.Borrowing) error) *IBorrowRepository_CreateBorrowing_Call {
	_c.Call.Return(run)
	return _c
}

// FindActiveByUserAndBook provides a mock function with given fields: ctx, userID, bookID
func (_m *IBorrowRepository) FindActiveByUserAndBook(ctx context.Context, userID int64, bookID int64) (*entity.Borrowing, error) {
	ret := _m.Called(ctx, userID, bookID)

	if len(ret) == 0 {
		panic("no return value specified for FindActiveByUserAndBook")
	}

	var r0 *entity.Borrowing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (*entity.Borrowing, error)); ok {
		return rf(ctx, userID, bookID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *entity.Borrowing); ok {
		r0 = rf(ctx, userID, bookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Borrowing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, userID, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBorrowRepository_FindActiveByUserAndBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindActiveByUserAndBook'
type IBorrowRepository_FindActiveByUserAndBook_Call struct {
	*mock.Call
}

// FindActiveByUserAndBook is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - bookID int64
func (_e *IBorrowRepository_Expecter) FindActiveByUserAndBook(ctx interface{}, userID interface{}, bookID interface{}) *IBorrowRepository_FindActiveByUserAndBook_Call {
	return &IBorrowRepository_FindActiveByUserAndBook_Call{Call: _e.mock.On("FindActiveByUserAndBook", ctx, userID, bookID)}
}

func (_c *IBorrowRepository_FindActiveByUserAndBook_Call) Run(run func(ctx context.Context, userID int64, bookID int64)) *IBorrowRepository_FindActiveByUserAndBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *IBorrowRepository_FindActiveByUserAndBook_Call) Return(_a0 *entity.Borrowing, _a1 error) *IBorrowRepository_FindActiveByUserAndBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBorrowRepository_FindActiveByUserAndBook_Call) RunAndReturn(run func(context.Context, int64, int64) (*entity.Borrowing, error)) *IBorrowRepository_FindActiveByUserAndBook_Call {
	_c.Call.Return(run)
	return _c
}

// FindBorrowingByID provides a mock function with given fields: ctx, id
func (_m *IBorrowRepository) FindBorrowingByID(ctx context.Context, id int64) (*entity.Borrowing, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindBorrowingByID")
	}

	var r0 *entity.Borrowing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.Borrowing, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Borrowing); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Borrowing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBorrowRepository_FindBorrowingByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBorrowingByID'
type IBorrowRepository_FindBorrowingByID_Call struct {
	*mock.Call
}

// FindBorrowingByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *IBorrowRepository_Expecter) FindBorrowingByID(ctx interface{}, id interface{}) *IBorrowRepository_FindBorrowingByID_Call {
	return &IBorrowRepository_FindBorrowingByID_Call{Call: _e.mock.On("FindBorrowingByID", ctx, id)}
}

func (_c *IBorrowRepository_FindBorrowingByID_Call) Run(run func(ctx context.Context, id int64)) *IBorrowRepository_FindBorrowingByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IBorrowRepository_FindBorrowingByID_Call) Return(_a0 *entity.Borrowing, _a1 error) *IBorrowRepository_FindBorrowingByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBorrowRepository_FindBorrowingByID_Call) RunAndReturn(run func(context.Context, int64) (*entity.Borrowing, error)) *IBorrowRepository_FindBorrowingByID_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOrUpdateBorrowing provides a mock function with given fields: ctx, b
func (_m *IBorrowRepository) InsertOrUpdateBorrowing(ctx context.Context, b *entity.Borrowing) error {
	ret := _m.Called(ctx, b)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrUpdateBorrowing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Borrowing) error); ok {
		r0 = rf(ctx, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBorrowRepository_InsertOrUpdateBorrowing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOrUpdateBorrowing'
type IBorrowRepository_InsertOrUpdateBorrowing_Call struct {
	*mock.Call
}

// InsertOrUpdateBorrowing is a helper method to define mock.On call
//   - ctx context.Context
//   - b *entity.Borrowing
func (_e *IBorrowRepository_Expecter) InsertOrUpdateBorrowing(ctx interface{}, b interface{}) *IBorrowRepository_InsertOrUpdateBorrowing_Call {
	return &IBorrowRepository_InsertOrUpdateBorrowing_Call{Call: _e.mock.On("InsertOrUpdateBorrowing", ctx, b)}
}

func (_c *IBorrowRepository_InsertOrUpdateBorrowing_Call) Run(run func(ctx context.Context, b *entity.Borrowing)) *IBorrowRepository_InsertOrUpdateBorrowing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Borrowing))
	})
	return _c
}

func (_c *IBorrowRepository_InsertOrUpdateBorrowing_Call) Return(_a0 error) *IBorrowRepository_InsertOrUpdateBorrowing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBorrowRepository_InsertOrUpdateBorrowing_Call) RunAndReturn(run func(context.Context, *entity.Borrowing) error) *IBorrowRepository_InsertOrUpdateBorrowing_Call {
	_c.Call.Return(run)
	return _c
}

// NewIBorrowRepository creates a new instance of IBorrowRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBorrowRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBorrowRepository {
	mock := &IBorrowRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
