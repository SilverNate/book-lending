// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IJWTService is an autogenerated mock type for the IJWTService type
type IJWTService struct {
	mock.Mock
}

type IJWTService_Expecter struct {
	mock *mock.Mock
}

func (_m *IJWTService) EXPECT() *IJWTService_Expecter {
	return &IJWTService_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: userID, email
func (_m *IJWTService) GenerateToken(userID int64, email string) (string, error) {
	ret := _m.Called(userID, email)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (string, error)); ok {
		return rf(userID, email)
	}
	if rf, ok := ret.Get(0).(func(int64, string) string); ok {
		r0 = rf(userID, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(userID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IJWTService_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type IJWTService_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - userID int64
//   - email string
func (_e *IJWTService_Expecter) GenerateToken(userID interface{}, email interface{}) *IJWTService_GenerateToken_Call {
	return &IJWTService_GenerateToken_Call{Call: _e.mock.On("GenerateToken", userID, email)}
}

func (_c *IJWTService_GenerateToken_Call) Run(run func(userID int64, email string)) *IJWTService_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *IJWTService_GenerateToken_Call) Return(_a0 string, _a1 error) *IJWTService_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IJWTService_GenerateToken_Call) RunAndReturn(run func(int64, string) (string, error)) *IJWTService_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewIJWTService creates a new instance of IJWTService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIJWTService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IJWTService {
	mock := &IJWTService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
